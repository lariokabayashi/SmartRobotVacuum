#BlueJ class context
comment0.target=Map
comment0.text=\n\ Map\ data\ structure\ used\ by\ the\ vacuum\ robot\ to\ store\ the\ map\n\ 0\ \=\ cleaned\ tile\n\ 1\ \=\ obstacle\n\ 2\ \=\ unchecked\n\ 3\ \=\ virtual\ boundary\n\ 4\ \=\ untouched\n\n\ @Brian\n\ @28/5\n
comment1.params=width\ height
comment1.target=Map(int,\ int)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Map\n\ Initializes\ the\ map\ with\ a\ given\ width\ and\ height.\n\n\ @param\ width\ \ the\ width\ of\ the\ map\n\ @param\ height\ the\ height\ of\ the\ map\n
comment10.params=
comment10.target=int\ height()
comment10.text=\n\ Gets\ height.\n
comment11.params=
comment11.target=int\ width()
comment11.text=\n\ Gets\ the\ width\n
comment12.params=
comment12.target=boolean\ isCleaningDone()
comment12.text=\n\ a\ BFS\ search\ of\ the\ current\ map\ to\ see\ if\ all\ reachable\ areas\ are\ \n\ cleaned.\n
comment13.params=
comment13.target=Map\ copy()
comment13.text=\n\ does\ a\ deep\ copy\ of\ this\ map\n
comment14.params=
comment14.target=boolean\ isEmpty()
comment14.text=\n\ Checks\ if\ current\ map\ is\ empty.\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\n\ Converts\ the\ map\ into\ a\ string\ format\ to\ be\ able\ to\ print.\n\ \n\ @return\ string\ which\ have\ the\ grid\ format.\n
comment16.params=xCoord\ yCoord
comment16.target=boolean\ isAtStart(int,\ int)
comment16.text=\n\ Checks\ if\ the\ given\ row\ and\ column\ correspond\ to\ the\ starting\ point.\n\ Note\:\ In\ this\ design,\ x\ corresponds\ to\ the\ column\ and\ y\ to\ the\ row.\n\n\ @param\ row\ the\ current\ row\ of\ the\ robot\n\ @param\ col\ the\ current\ column\ of\ the\ robot\n\ @return\ true\ if\ the\ given\ position\ is\ the\ starting\ position\n
comment17.params=
comment17.target=int[]\ getStart()
comment17.text=\n\ Getter\ for\ the\ starting\ position\n\ \n\ @return\ array\ of\ the\ x\ and\ y\ starting\ coordinates.\n
comment18.params=x\ y
comment18.target=boolean\ isValidPosition(int,\ int)
comment18.text=\n\ Getter\ for\ the\ starting\ position\n\ \n\ @param\ x\ the\ x\ coordinate\ to\ be\ checked\n\ @param\ y\ the\ y\ coordinate\ to\ be\ checked\n\ \n\ @return\ if\ the\ given\ positions\ do\ not\ have\ the\ value\ of\ 1\ or\ 3.\n
comment19.params=
comment19.target=void\ revertCleanedToUntouched()
comment19.text=\n\ Reverts\ the\ map\ to\ an\ uncleaned\ state.\n
comment2.params=
comment2.target=Map()
comment2.text=\n\ Constructs\ an\ empty\ map.\n
comment20.params=sd\ vb\ coords
comment20.target=void\ initialize(SurroundingData,\ VirtualBoundary,\ int[])
comment20.text=\n\ Initialises\ the\ starting\ position\ and\ map.\ Also\ applies\ virtual\ boundary.\n\ \n\ @param\ sd\ the\ distances\ of\ obstacles\ in\ each\ direction\n\ @param\ vb\ the\ boundary\ made\ by\ the\ user\n\ @param\ coords\ an\ array\ containing\ starting\ position\n
comment21.params=nextMove\ sd\ vb\ coords
comment21.target=void\ update(MovementWord,\ SurroundingData,\ VirtualBoundary,\ int[])
comment21.text=\n\ Updates\ the\ map\ and\ robot\ position\ based\ on\ the\ next\ movement\ direction\ and\ sensor\ data.\n\ \n\ @param\ nextMove\ the\ direction\ of\ the\ next\ robot\ movement\n\ @param\ sd\ the\ distances\ of\ obstacles\ in\ each\ direction\n\ @param\ vb\ the\ boundary\ made\ by\ the\ user\n\ @param\ coords\ an\ array\ containing\ starting\ position\n
comment22.params=sd
comment22.target=void\ continueMap(SurroundingData)
comment22.text=\ \n\ Continue\ cleaning\ of\ map\ from\ dock\n\ \n\ @param\ sd\ the\ distances\ of\ obstacles\ in\ each\ direction\n
comment23.params=
comment23.target=void\ updateApp()
comment24.params=
comment24.target=int\ getCleaningProgress()
comment24.text=\n\ Returns\ the\ cleaning\ progress\ as\ a\ percentage\ between\ 0.0\ and\ 100.0.\n\ Uses\ BFS\n\ \n\ @return\ progress\ percentage\ from\ 0.0\ to\ 100.0\n
comment25.params=
comment25.target=int\ getCurrPercent()
comment3.params=x\ y\ value
comment3.target=void\ setValue(int,\ int,\ int)
comment3.text=\n\ Set\ a\ value\ at\ a\ specific\ (x,\ y)\ coordinate.\n\n\ @param\ x\ \ \ \ \ the\ x-coordinate\n\ @param\ y\ \ \ \ \ the\ y-coordinate\n\ @param\ value\ the\ value\ to\ set\ at\ this\ coordinate\n
comment4.params=x\ y
comment4.target=int\ getValue(int,\ int)
comment4.text=\n\ Get\ the\ value\ at\ a\ specific\ (x,\ y)\ coordinate.\n\n\ @param\ x\ the\ x-coordinate\n\ @param\ y\ the\ y-coordinate\n\ @return\ the\ value\ at\ the\ specified\ coordinate\n
comment5.params=x\ y
comment5.target=boolean\ exists(int,\ int)
comment5.text=\n\ Checks\ if\ a\ value\ exists\ at\ a\ specific\ (x,\ y)\ coordinate.\n\n\ @param\ x\ the\ x-coordinate\n\ @param\ y\ the\ y-coordinate\n\ @return\ true\ if\ a\ value\ exists\ at\ the\ specified\ coordinates,\ \n\ false\ otherwise\n
comment6.params=x\ y
comment6.target=boolean\ isValidCoordinate(int,\ int)
comment6.text=\n\ Checks\ if\ the\ given\ coordinates\ are\ within\ bounds\ of\ the\ map.\n\n\ @param\ x\ the\ x-coordinate\n\ @param\ y\ the\ y-coordinate\n\ @return\ true\ if\ the\ coordinates\ are\ valid,\ false\ otherwise\n
comment7.params=
comment7.target=void\ printMap()
comment7.text=\n\ Prints\ the\ entire\ map.\n
comment8.params=vb
comment8.target=void\ applyVirtualBoundary(VirtualBoundary)
comment8.text=\n\ Edits\ the\ map\ to\ display\ the\ virtual\ boundary\ set\ by\ the\ user.\n\ \n\ @param\ vb\ virtual\ boundary\ set\ by\ the\ user.\n
comment9.params=movement
comment9.target=void\ addRowOrColumn(MovementWord)
comment9.text=\n\ Adds\ a\ new\ row\ or\ column\ to\ the\ grid\ based\ on\ the\ given\ \n\ movement\ direction.\n\ All\ the\ new\ cells\ added\ are\ set\ to\ 0.\n\n\ @param\ movement\ the\ MovementWord\ object\ \n
numComments=26
